import 'dart:io';

/* 
Exercício I
Para cada variante de função que estudamos elaborar a seguinte função:

	→ função calularSalario - precisa do (i) valor salario e o (ii) valor do desconto. 
   Permitir o desconto somente se haver saldo. No final informar o saldo.
*/
void main(List<String> arguments) {
calcularSalario();
calcularSalario2(100,50);
calcularSalario3();
calcularSalario4(100,20);
}

//sem retorno e sem parametro
 void calcularSalario() {
  double salario, desconto, salarioFinal;
  print('informe o salario');
  salario = double.parse(stdin.readLineSync()!);

if(salario > 0){
  print('informe desconto');
  desconto = double.parse(stdin.readLineSync()!);

  salarioFinal = (salario - desconto);

  
    print("O salario final é:$salarioFinal");
  }else{
    print("O salario informado é inválido.");
  }
 }

//sem retorno e com parametro
 void calcularSalario2(double salario, double desconto){
  double salarioFinal = salario - desconto;
  print("$salarioFinal");

 }


 //com retorno e sem parametro
 void calcularSalario3(){
  double salario, desconto, salarioFinal;
  print("Informe seu salario:");
  salario = double.parse(stdin.readLineSync()!);

  if(salario > 0){
    print("Informe o desconto:");
    desconto = double.parse(stdin.readLineSync()!);
    
    salarioFinal = salario - desconto;

    return print("$salarioFinal");
  }else{
  return print("Salario informado é invalido.");
  }
 }

 //com retorno e com parametro
 void calcularSalario4(double salario, double desconto){
  if(salario <= 0){
    return print("Salario informando invalido.");
  }else{
    double salarioFinal = salario - desconto;
    return print("O salario final é:$salarioFinal");
  }
 }
 
 
 
 
 /*
 Exercício II

Pensar em um projeto único - quanto maior o escopo melhor - possibilita pensar em vários exemplos

Elabroar funções no escopo do projeto (autêntico)

Fazer comentários de tudo que entendeu

Elabore: 

1) Duas funções sem retorno e sem parâmetro; 

2) Duas funções sem retorno e com parâmetro; 

3) Duas funções com retorno e sem parâmetro;  

4) Duas funções com retorno e com parâmetro;

5) Duas funções com parâmetros opcionais (com o devido contexto);

6) Duas funções com parâmetros nomeados.
*/




/*
Exercício III

1) Em relação a sintaxe, quais são as variantes na escrita de uma função? 
Quais são as especificidades e em que caso pode-se utilziar cada uma?
*/

/*
função sem retorno e sem parametros
  void minhaFuncao() {
  // função
}
é útil quando você precisa executar uma ação, mas não precisa retornar nenhum valor

função com retorno e sem parâmetros
int minhaFuncao() {
  // função
  return resultado;
}
é útil quando você precisa retornar um valor após executar uma ação. 
Por exemplo, calcular a soma de dois números

função sem retorno e com parâmetros
void minhaFuncao(int parametro1, String parametro2) {
  // função
}
é útil quando você precisa executar uma ação que depende de um ou mais valores que são passados 
como parâmetros. 
Por exemplo, imprimir uma mensagem na tela com base em um valor de entrada

função com retorno e com parâmtros
int minhaFuncao(int parametro1, String parametro2) {
  // função
  return resultado;
}

é útil quando você precisa retornar um valor que depende de um ou mais valores que 
são passados como parâmetros. 
Por exemplo, calcular a soma de dois números que são passados como parâmetros
*/
